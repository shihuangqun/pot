<?php

namespace app\index\controller;

use addons\wechat\library\Config as ConfigService;
use app\common\controller\Frontend;
use EasyWeChat\Foundation\Application;
use think\Config;
use think\Db;

class Index extends Frontend
{

    protected $noNeedLogin = '*';
    protected $noNeedRight = '*';
    protected $layout = '';
    protected $site = null;

    public function _initialize()
    {
        $this->site = Config::get('site');
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    public function index()
    {

        $app = new Application(ConfigService::load());

        $today = Db::name('task')
            ->alias('t')
            ->join('category c','c.id = t.category_id')
            ->whereTime('t.createtime', 'd')
            ->where('t.status','1')
            ->order('t.createtime desc')
            ->field('t.*,c.name as category_name')
            ->select();//今日

        $data = Db::name('task')
            ->alias('t')
            ->join('category c','c.id = t.category_id')
            ->where('t.status','1')
            ->order('t.createtime desc')
            ->field('t.*,c.name as category_name')
            ->select();//近期
//        dump($data);
        $this->assign([
            'today' => $today,
            'data' => $data,
            'site' => $this->site

        ]);
        return $this->view->fetch();
    }
    public function show(){
        $id = input('id');
        $user = $this->getUserInfo();

        //查询购买状态
        $buy_status = Db::name('order')
            ->where('task_id',$id)
            ->where('member_id',$user['id'])
            ->where('status','1')
            ->find();
//        dump($buy_status);
        $info = Db::name('task')
            ->alias('t')
            ->join('category c','c.id = t.category_id')
            ->field('t.*,c.name as category_name')
            ->find($id);
        if(!$info) return $this->error('该文章已被删除！');
        $buy_info  = Db::name('order')
            ->alias('o')
            ->join('member m','m.id = o.member_id')
            ->where('o.task_id',$id)
            ->where('o.status','1')
            ->order('createtime desc')
            ->field('o.*,m.avatar,m.nickname')
            ->select();

        $buy_infos = [];
        foreach ($buy_info as $k => $v){
            $v['nickname'] = $this->substr_cut($v['nickname']);
            $buy_infos[] = $v;
        }
//        dump($buy_infos);

        $this->SaveRead($id);//更新文章浏览量
        $this->assign([
            'info' => $info,
            'buy_info' => $buy_infos,
            'buy_status' => $buy_status,
            'site' => $this->site
        ]);
        return $this->fetch();
    }

    public function buy(){//单条购买

        $id = input('id');
        $chongzhi = Db::name('recharge')->order('money asc')->select();
        $info = Db::name('task')
            ->alias('t')
            ->join('category c','c.id = t.category_id')
            ->field('t.*,c.name as category_name')
            ->find($id);
//        dump($info);
        $user = $this->getUserInfo();
        $this->assign([
            'info' => $info,
            'num' => 1,
            'chongzhi' => $chongzhi,
            'user' => $user
        ]);
        return $this->fetch();
    }
    //买断信息
    public function buyout(){
        $id = input('id');
        $chongzhi = Db::name('recharge')->order('money asc')->select();
        $info = Db::name('task')
            ->alias('t')
            ->join('category c','c.id = t.category_id')
            ->field('t.*,c.name as category_name')
            ->find($id);
//        dump($info);
        $this->assign([
            'info' => $info,
            'num' => $info['task_num'] - $info['already_num'],
            'chongzhi' => $chongzhi
        ]);
        return $this->fetch('buy');
    }
//    public function news()
//    {
//        $newslist = [];
//        return jsonp(['newslist' => $newslist, 'new' => count($newslist), 'url' => 'https://www.fastadmin.net?ref=news']);
//    }

    public function share(){
        $url = $this->request->request("urls", "", "trim");
        $jssdk = new Jssdk();
        $package = $jssdk->getSignedPackage($url);

        return json_encode($package);
    }
    //用户昵称隐私
    function substr_cut($user_name){
        $strlen     = mb_strlen($user_name, 'utf-8');
        $firstStr     = mb_substr($user_name, 0, 1, 'utf-8');
//        $lastStr     = mb_substr($user_name, -1, 1, 'utf-8');
//        dump($lastStr);
        return $strlen == 2 ? $firstStr . str_repeat('*', mb_strlen($user_name, 'utf-8') - 1) : $firstStr . str_repeat("*", $strlen - 2) ;
    }

}
